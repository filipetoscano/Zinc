<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt"
    xmlns:wcf="urn:zinc/service-model"
    exclude-result-prefixes="msxsl wcf">

    <xsl:param name="FileName" />
    <xsl:param name="Namespace" />

    <xsl:output method="text" indent="yes" />

    <xsl:variable name="NewLine">
        <xsl:text>
</xsl:text>
    </xsl:variable>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ wcf:behaviours
    ~ Transformation entry point.
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" wcf:behaviours ">
        <xsl:text>// autogenerated: do NOT edit manually / do NOT commit to source control
using System;
using System.Collections.ObjectModel;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Configuration;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;

</xsl:text>

        <xsl:text>namespace </xsl:text>
        <xsl:value-of select=" $Namespace " />
        <xsl:value-of select=" $NewLine " />

        <xsl:text>{</xsl:text>
        <xsl:value-of select=" $NewLine " />

        <xsl:apply-templates select=" wcf:add " />

        <xsl:text>}</xsl:text>
        <xsl:value-of select=" $NewLine " />
    </xsl:template>



    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ wcf:add
    ~ Generates all boring artifacts related to a WCF behavior.
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsl:template match=" wcf:add ">

        <!-- Part #1: IServiceBehavior -->
        <xsl:text>    /// &lt;summary /&gt;
    [AttributeUsage( AttributeTargets.Class )]
    public class </xsl:text>

        <xsl:value-of select=" @name " />

        <xsl:text>ServiceBehavior : Attribute, IServiceBehavior
    {
        /// &lt;summary /&gt;
        public void AddBindingParameters( ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection&lt;ServiceEndpoint&gt; endpoints, BindingParameterCollection bindingParameters )
        {
        }

        /// &lt;summary /&gt;
        public void ApplyDispatchBehavior( ServiceDescription serviceDescription, ServiceHostBase serviceHostBase )
        {
            foreach ( ChannelDispatcher cDispatcher in serviceHostBase.ChannelDispatchers )
            {
                foreach ( EndpointDispatcher eDispatcher in cDispatcher.Endpoints )
                {
                    eDispatcher.DispatchRuntime.MessageInspectors.Add( new </xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>MessageInspector() );
                }
            }
        }

        /// &lt;summary /&gt;
        public void Validate( ServiceDescription serviceDescription, ServiceHostBase serviceHostBase )
        {
        }
    }

</xsl:text>


        <!-- Part #2: IEndpointBehavior -->
        <xsl:text>    /// &lt;summary /&gt;
    public class </xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>Behavior : IEndpointBehavior
    {
        /// &lt;summary /&gt;
        public void AddBindingParameters( ServiceEndpoint endpoint, BindingParameterCollection bindingParameters )
        {
        }

        /// &lt;summary /&gt;
        public void ApplyClientBehavior( ServiceEndpoint endpoint, ClientRuntime clientRuntime )
        {
            // Do nothing!
        }

        /// &lt;summary /&gt;
        public void ApplyDispatchBehavior( ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher )
        {
            ChannelDispatcher channelDispatcher = endpointDispatcher.ChannelDispatcher;

            if ( channelDispatcher != null )
            {
                foreach ( EndpointDispatcher ed in channelDispatcher.Endpoints )
                {
                    ed.DispatchRuntime.MessageInspectors.Add( new </xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>MessageInspector() );
                }
            }
        }

        /// &lt;summary /&gt;
        public void Validate( ServiceEndpoint endpoint )
        {
        }
    }

</xsl:text>


        <!-- Part #3: BehaviorExtensionElement -->
        <xsl:text>    /// &lt;summary /&gt;
    public class </xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>BehaviorExtensionElement : BehaviorExtensionElement
    {
        /// &lt;summary /&gt;
        protected override object CreateBehavior()
        {
            return new </xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>Behavior();
        }

        /// &lt;summary /&gt;
        public override Type BehaviorType
        {
            get
            {
                return typeof( </xsl:text>
        <xsl:value-of select=" @name " />
        <xsl:text>Behavior );
            }
        }
    }

</xsl:text>

    </xsl:template>


</xsl:stylesheet>
