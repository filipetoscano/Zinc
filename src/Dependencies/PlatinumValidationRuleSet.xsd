<?xml version="1.0" encoding="utf-8"?>
<xsd:schema
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    targetNamespace="urn:platinum/validation"
    xmlns:y="urn:platinum/validation"
    xmlns="urn:platinum/validation">


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ ruleSet/
    ~ Schema root
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:element name="ruleSet">
        <xsd:annotation>
            <xsd:documentation>
                Describes a rule set: a list of (potentially conditional) per-field rules which
                apply to a given class.
            </xsd:documentation>
        </xsd:annotation>

        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="summary" type="xsd:string" minOccurs="0" />
                <xsd:element name="remarks" type="xsd:string" minOccurs="0" />

                <xsd:element name="field" minOccurs="0" maxOccurs="unbounded">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="summary" type="xsd:string" minOccurs="0" />
                            <xsd:element name="remarks" type="xsd:string" minOccurs="0" />

                            <xsd:choice minOccurs="0">
                                <xsd:sequence>
                                    <xsd:element name="required" type="emptyRule" minOccurs="0" />
                                    <xsd:element name="forbidden" type="emptyRule" minOccurs="0" />
                                    <xsd:element name="email" type="emptyRule" minOccurs="0" />
                                    <xsd:element name="length" type="lengthRule" minOccurs="0" />
                                    <xsd:element name="in" type="inListRule" minOccurs="0" />
                                    <xsd:element name="regex" type="regexRule" minOccurs="0" maxOccurs="unbounded" />
                                    <xsd:element name="function" type="functionRule" minOccurs="0" maxOccurs="unbounded" />
                                </xsd:sequence>

                                <xsd:sequence>
                                    <xsd:element name="if" maxOccurs="unbounded">
                                        <xsd:complexType>
                                            <xsd:complexContent>
                                                <xsd:extension base="ruleList">
                                                    <xsd:attribute name="when" type="xsd:string" />
                                                    <xsd:attribute name="equals" type="xsd:string" />
                                                </xsd:extension>
                                            </xsd:complexContent>
                                        </xsd:complexType>
                                    </xsd:element>

                                    <xsd:element name="else" type="ruleList" minOccurs="0" />
                                </xsd:sequence>
                            </xsd:choice>
                        </xsd:sequence>

                        <xsd:attribute name="name" type="xsd:string" use="required" />
                    </xsd:complexType>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>

        <xsd:unique name="uqFieldName">
            <xsd:selector xpath=" y:field " />
            <xsd:field xpath=" @name " />
        </xsd:unique>
    </xsd:element>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:complexType name="ruleList">
        <xsd:sequence>
            <xsd:element name="required" type="emptyRule" minOccurs="0" />
            <xsd:element name="forbidden" type="emptyRule" minOccurs="0" />
            <xsd:element name="email" type="emptyRule" minOccurs="0" />
            <xsd:element name="length" type="lengthRule" minOccurs="0" />
            <xsd:element name="in" type="inListRule" minOccurs="0" />
            <xsd:element name="regex" type="regexRule" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="function" type="functionRule" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
    </xsd:complexType>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ Rule specific types
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:complexType name="emptyRule" />


    <xsd:complexType name="functionRule">
        <xsd:attribute name="name" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>Name of the function rule.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="resx" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of the embedded javascript resource, containing the file.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>


    <xsd:complexType name="lengthRule">
        <xsd:attribute name="min" type="xsd:positiveInteger" use="optional">
            <xsd:annotation>
                <xsd:documentation>Minimum number of characters that the string must have.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="max" type="xsd:positiveInteger" use="optional">
            <xsd:annotation>
                <xsd:documentation>Maximum number of characters that the string may have.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>


    <xsd:complexType name="inListRule">
        <xsd:attribute name="list" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>Space seperated list of values which are allowed.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>


    <xsd:complexType name="regexRule">
        <xsd:attribute name="name" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>Name of the regex rule, in case there are multiple rules.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="pattern" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>Regular expression pattern which must be matched.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="flex" type="xsd:boolean" use="optional" default="false">
            <xsd:annotation>
                <xsd:documentation>
                    When set to true, allows the regex to NOT start with ^ and end with $.
                    Otherwise, it MUST! This is done to prevent developers for mis-using
                    regular expressions!
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

</xsd:schema>