<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    targetNamespace="urn:zinc"
    xmlns:zn="urn:zinc"
    xmlns:mock="urn:zinc/mock"
    xmlns:rest="urn:zinc/rest"
    xmlns:v="urn:zinc/validation">

    <xsd:import namespace="urn:zinc/mock" schemaLocation="ZnServices-Mock.xsd" />
    <xsd:import namespace="urn:zinc/rest" schemaLocation="ZnServices-Rest.xsd" />
    <xsd:import namespace="urn:zinc/validation" schemaLocation="ZnServices-Validation.xsd" />

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ services
    ~ The index of the application, which enumerates all of the 
    ~ services (and it's corresponding methods) which are implemented.
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:element name="services">
        <xsd:annotation>
            <xsd:documentation>Enumerates all of the services, and methods, which this application publishes.</xsd:documentation>
        </xsd:annotation>

        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="namespace" type="xsd:anyURI">
                    <xsd:annotation>
                        <xsd:documentation>XML namespace of application, used for the SOAP endpoint.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>

                <xsd:element name="service" type="zn:serviceType" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                        <xsd:documentation>Describes a service, or collection of methods.</xsd:documentation>
                    </xsd:annotation>

                    <xsd:unique name="uqMethodName">
                        <xsd:selector xpath=" zn:method " />
                        <xsd:field xpath=" @name " />
                    </xsd:unique>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>

        <xsd:unique name="uqServiceName">
            <xsd:selector xpath=" zn:service " />
            <xsd:field xpath=" @name " />
        </xsd:unique>
    </xsd:element>

    <xsd:complexType name="serviceType">
        <xsd:sequence>
            <xsd:element name="method" minOccurs="1" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="name" type="zn:token" use="required" />
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>

        <xsd:attribute name="name" type="zn:token" use="required" />
    </xsd:complexType>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ types
    ~ Shared types in the application.
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:element name="types">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="structure">
                        <xsd:complexType>
                            <xsd:complexContent>
                                <xsd:extension base="zn:structureType">
                                    <xsd:attribute name="type" type="zn:token" use="required" />
                                </xsd:extension>
                            </xsd:complexContent>
                        </xsd:complexType>

                        <xsd:unique name="structureProperty2">
                            <xsd:selector xpath=" zn:* " />
                            <xsd:field xpath=" @name " />
                        </xsd:unique>
                    </xsd:element>

                    <xsd:element name="enumeration" type="zn:enumerationType">
                        <xsd:unique name="enumValue2">
                            <xsd:selector xpath=" zn:enum " />
                            <xsd:field xpath=" @value " />
                        </xsd:unique>
                    </xsd:element>
                </xsd:choice>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ method
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:element name="method">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="notImplemented" minOccurs="0" />
                <xsd:element name="summary" type="xsd:string" minOccurs="0" />
                <xsd:element name="remarks" type="xsd:string" minOccurs="0" />

                <xsd:element name="using" minOccurs="0" maxOccurs="unbounded">
                    <xsd:complexType>
                        <xsd:attribute name="namespace" type="zn:csNamespace" />
                    </xsd:complexType>
                </xsd:element>

                <xsd:element name="request">
                    <xsd:annotation>
                        <xsd:documentation>Describes the request message of the method.</xsd:documentation>
                    </xsd:annotation>

                    <xsd:complexType>
                        <xsd:complexContent>
                            <xsd:extension base="zn:structureType">
                                <xsd:attribute ref="rest:method" use="optional" />
                            </xsd:extension>
                        </xsd:complexContent>
                    </xsd:complexType>

                    <xsd:unique name="reqProperty">
                        <xsd:selector xpath=" zn:* " />
                        <xsd:field xpath=" @name " />
                    </xsd:unique>
                </xsd:element>

                <xsd:element name="response">
                    <xsd:annotation>
                        <xsd:documentation>Describes the response message of the method.</xsd:documentation>
                    </xsd:annotation>

                    <xsd:complexType>
                        <xsd:complexContent>
                            <xsd:extension base="zn:structureType">
                                <xsd:anyAttribute namespace="urn:zinc/rest" processContents="skip" />
                            </xsd:extension>
                        </xsd:complexContent>
                    </xsd:complexType>

                    <xsd:unique name="respProperty">
                        <xsd:selector xpath=" zn:* " />
                        <xsd:field xpath=" @name " />
                    </xsd:unique>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ structureType
    ~ This corresponds to a C# class, and each of the children will
    ~ get mapped to properties.
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:complexType name="structureType">
        <xsd:sequence>
            <xsd:element name="summary" type="xsd:string" minOccurs="0" />
            <xsd:element name="remarks" type="xsd:string" minOccurs="0" />

            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="string" type="zn:stringProperty">
                    <xsd:annotation>
                        <xsd:documentation>Character sequence. Mapped to 'string'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="bool" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Boolean value. Mapped to 'bool'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="short" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>16-bit integer. Mapped to 'short'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="int" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>32-bit integer. Mapped to 'int'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="long" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>64-bit integer. Mapped to 'long'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="float" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Single precision floating point number. Mapped to 'float'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="double" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Double precision floating point number. Mapped to 'double'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="decimal" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Fixed precision number. Mapped to 'decimal'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="date" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Date value. Mapped to 'DateTime'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="dateTime" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Date and time value. Mapped to 'DateTime'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="guid" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Unique identifier. Mapped to 'Guid'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="time" type="zn:simpleProperty">
                    <xsd:annotation>
                        <xsd:documentation>Time value. Mapped to 'DateTime'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="binary" type="zn:binaryProperty">
                    <xsd:annotation>
                        <xsd:documentation>Binary content. Mapped to 'byte[]'.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>

                <xsd:element name="enumeration" type="zn:enumerationProperty">
                    <xsd:unique name="enumValue">
                        <xsd:selector xpath=" zn:enum " />
                        <xsd:field xpath=" @value " />
                    </xsd:unique>
                </xsd:element>
                <xsd:element name="enumeration-ref" type="zn:typedProperty" />

                <xsd:element name="structure">
                    <xsd:annotation>
                        <xsd:documentation>Inline definition of class.</xsd:documentation>
                    </xsd:annotation>

                    <xsd:complexType>
                        <xsd:complexContent>
                            <xsd:extension base="zn:structureType">
                                <xsd:attribute name="name" type="zn:token" use="required">
                                    <xsd:annotation>
                                        <xsd:documentation>Name of property.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="type" type="zn:token" use="required" />
                                <xsd:attribute name="optional" type="xsd:boolean" default="false" />
                                <xsd:attribute name="array" type="xsd:boolean" default="false" />
                            </xsd:extension>
                        </xsd:complexContent>
                    </xsd:complexType>

                    <xsd:unique name="structureProperty">
                        <xsd:selector xpath=" * " />
                        <xsd:field xpath=" @name " />
                    </xsd:unique>
                </xsd:element>

                <xsd:element name="structure-ref" type="zn:typedProperty">
                    <xsd:annotation>
                        <xsd:documentation>Reference to existing class.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
    </xsd:complexType>



    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ properties
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:complexType name="simpleProperty">
        <xsd:sequence>
            <xsd:element name="summary" type="xsd:string" minOccurs="0" />
            <xsd:element name="remarks" type="xsd:string" minOccurs="0" />
        </xsd:sequence>

        <xsd:attribute name="name" type="zn:token" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of property.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optional" type="xsd:boolean" default="false">
            <xsd:annotation>
                <xsd:documentation>Indicates whether the field is optional. Default is false.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="array" type="xsd:boolean" default="false">
            <xsd:annotation>
                <xsd:documentation>Indicates whether the field repeats. Default is false.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute ref="mock:data" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Indicates name of mock data set to be used for random data generation.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ref="v:rule" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Indicates name of rule to be used for validation.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="typedProperty">
        <xsd:complexContent>
            <xsd:extension base="zn:simpleProperty">
                <xsd:attribute name="type" type="zn:fullType" use="required">
                    <xsd:annotation>
                        <xsd:documentation>Name of referenced type.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- Binary property -->
    <xsd:complexType name="binaryProperty">
        <xsd:sequence>
            <xsd:element name="summary" type="xsd:string" minOccurs="0" />
            <xsd:element name="remarks" type="xsd:string" minOccurs="0" />
        </xsd:sequence>

        <xsd:attribute name="name" type="zn:token" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of property.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optional" type="xsd:boolean" default="false">
            <xsd:annotation>
                <xsd:documentation>Indicates whether the field is optional. Default is false.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute ref="mock:data" use="optional" />
        <xsd:attribute ref="v:rule" use="optional" />
    </xsd:complexType>


    <!-- Enumeration type / property -->
    <xsd:complexType name="enumerationProperty">
        <xsd:complexContent>
            <xsd:extension base="zn:enumerationType">
                <xsd:attribute name="name" type="zn:token" use="required">
                    <xsd:annotation>
                        <xsd:documentation>Name of property.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="optional" type="xsd:boolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>Indicates whether the field is optional. Default is false.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="enumerationType">
        <xsd:sequence>
            <xsd:element name="summary" type="xsd:string" minOccurs="0" />
            <xsd:element name="remarks" type="xsd:string" minOccurs="0" />
            <xsd:element name="enum" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="summary" type="xsd:string" minOccurs="0" />
                        <xsd:element name="remarks" type="xsd:string" minOccurs="0" />
                    </xsd:sequence>

                    <xsd:attribute name="value" type="zn:token" use="required" />
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>

        <xsd:attribute name="type" type="zn:token" use="required" />
        <xsd:attribute name="flags" type="xsd:boolean" use="optional" default="false">
            <xsd:annotation>
                <xsd:documentation>Indicates whether an enumeration can be treated as a bit field; that is, a set of flags.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>


    <!-- String property -->
    <xsd:complexType name="stringProperty">
        <xsd:complexContent>
            <xsd:extension base="zn:simpleProperty">
                <xsd:sequence>
                    <xsd:element ref="v:length" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~
    ~ Enums / Patterns
    ~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <xsd:simpleType name="token">
        <xsd:annotation>
            <xsd:documentation>Defines a valid .NET type identifier.</xsd:documentation>
        </xsd:annotation>

        <xsd:restriction base="xsd:string">
            <xsd:pattern value="^[A-Z][a-zA-Z0-9_]*$" />
        </xsd:restriction>
    </xsd:simpleType>


    <xsd:simpleType name="fullType">
        <xsd:annotation>
            <xsd:documentation>Defines a valid full .NET type identifier (namespace and name).</xsd:documentation>
        </xsd:annotation>

        <xsd:restriction base="xsd:string">
            <xsd:pattern value="^([a-zA-Z][a-zA-Z0-9_]*\.)*[A-Z][a-zA-Z0-9_]*$" />
        </xsd:restriction>
    </xsd:simpleType>


    <xsd:simpleType name="csNamespace">
        <xsd:annotation>
            <xsd:documentation>Defines a valid .NET namespace.</xsd:documentation>
        </xsd:annotation>

        <xsd:restriction base="xsd:string">
            <xsd:pattern value="^(@?[a-z_A-Z]\w*(?:\.@?[a-z_A-Z]\w*)*)*$" />
        </xsd:restriction>
    </xsd:simpleType>

</xsd:schema>
